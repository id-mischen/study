    Vue-router

      优点：体验好，不需要每次从服务器获取全部，快速展现给用户；

      缺点：不利于SEO；使用浏览器的前进，后退键的时候会重新发送请求，没有合理的利用缓存；
            单页面无法记住之前滚动的位置，无法在前进和后退的时候记住滚动的位置。
1, 原始：
        <router-link to="[router-name]">Go to Foo </router-link>
        <router-view></router-view>

   动态路由：
        let route = [
            {
                path: '/foo/:id',
                component: Foo,
                children:[
                    { path: '',component: '' }
                ]
            }
        ]
        let router = new VueRouter({
            route
        })
        new Vue({
            router
        })

        监听路由：、
             方式一、
                    beforeRouteUpdate(to, from, next){
                        next()
                    }
             方式二、
                    watch:{
                        '$route'(to, from){

                        }
                    }


        获取参数： $route.params.id

   编程式导航
    1,    // 字符串
        router.push('home')
        // 对象
        router.push({ path: 'home' })
        // 命名的路由
        router.push({ name: 'user', params: { userId: '123' }})
        // 带查询参数，变成 /register?plan=private
        router.push({ path: 'register', query: { plan: 'private' }})

        // 这里的 params 不生效
        router.push({ path: '/user', params: { userId }}) // -> /user

    2,
        router.replace(location, onComplete?, onAbort?)
            跟 router.push 很像，唯一的不同就是，它不会向 history 添加新记录，
            而是跟它的方法名一样 —— 替换掉当前的 history 记录。

        router.go()

    3，命名视图
            一个名字多个视图
          const router = new VueRouter({
            routes: [
              {
                path: '/',
                components: {   //注意 是 复数
                  default: Foo,
                  a: Bar,
                  b: Baz
                }
              }
            ]
          })
          <router-view class="view one"></router-view>
          <router-view class="view two" name="a"></router-view>
          <router-view class="view three" name="b"></router-view>
    4，重定向
            const router = new VueRouter({
              routes: [
                { path: '/a', redirect: '/b' }
              ]
            })
        命名的路由
            const router = new VueRouter({
              routes: [
                { path: '/a', redirect: { name: 'foo' }}
              ]
            })
        别名
                alias
            const router = new VueRouter({
              routes: [
                { path: '/a', component: A, alias: '/b' }
              ]
            })
    5，props进行解耦

        1.  布尔模式
            { path: '/user/:id', component: User, props: true },
                如果 props 被设置为 true，route.params 将会被设置为组件属性。

            组件：
                props:['id']
                $route.params.id
        2.  对象模式
            const router = new VueRouter({
              routes: [
                { path: '/promotion/from-newsletter', component: Promotion, props: { newsletterPopup: false } }
              ]
            })
        3，函数模式
            const router = new VueRouter({
              routes: [
                { path: '/search', component: SearchUser, props: (route) => ({ query: route.query.q }) }
              ]
            })
    6， history和 hash的区别
    7，  高级
        1，导航守卫

        2，全局前置守卫
                router.beforeEach((to, from, next)=>{
                        to:  去往哪里
                        from：从哪里来
                        next：过路桥

                        to.fullPath
                        next('/name')
                })
                next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed (确认的)。

                next(false): 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 from 路由对应的地址。

                next('/') 或者 next({ path: '/' }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 replace: true、name: 'home' 之类的选项以及任何用在 router-link 的 to prop 或 router.push 中的选项。

                next(error): (2.4.0+) 如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给 router.onError() 注册过的回调。
        3，全局后置钩子
                router.afterEach((to, from)=>{})

        4，路由独享的守卫
                routes:[
                    {
                        path: '/',
                        name: 'App'
                        component: App,
                        beforeEnter: (to, from, next)=>{

                        }
                    }
                ]
        5, 组件内的守卫
                beforeRouteEnter()
                beforeRouteUpdate()
                beforeRouteLeave()
              beforeRouteEnter (to, from, next) {
                // 在渲染该组件的对应路由被 confirm 前调用
                // 不！能！获取组件实例 `this`
                // 因为当守卫执行前，组件实例还没被创建
              },
              beforeRouteUpdate (to, from, next) {
                // 在当前路由改变，但是该组件被复用时调用
                // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，
                // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。
                // 可以访问组件实例 `this`
              },
              beforeRouteLeave (to, from, next) {
                // 导航离开该组件的对应路由时调用
                // 可以访问组件实例 `this`
              }
    8, 路由元信息
            xxx...
                children:[
                    {
                        path: '',
                        name: '',
                        component: '',
                        meta: { require: false }
                    }
                ]
                to.matched.some(record => record.meta.requiresAuth) //获取该值

                to.meta.requireAuth















